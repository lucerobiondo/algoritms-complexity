const numbers = require('../millon_numeros.json');

/* 

Radix Sort es un algoritmo de ordenamiento no comparativo que ordena los n√∫meros procesando sus d√≠gitos, de menor a mayor significancia (del d√≠gito de unidades al de miles, etc.).

‚úÖ Ideal para n√∫meros enteros positivos, especialmente cuando tienen pocos d√≠gitos.
‚ùå No funciona directamente con n√∫meros negativos (requiere ajustes).

‚öôÔ∏è ¬øC√≥mo funciona?
Empieza por ordenar los n√∫meros seg√∫n su d√≠gito menos significativo (las unidades).

Luego ordena por las decenas, centenas, etc.

Repite esto hasta haber procesado todos los d√≠gitos del n√∫mero m√°s largo.

üëâ Para ordenar por d√≠gito, se usa Counting Sort internamente.

‚è±Ô∏è Complejidad Big O
Tiempo: O(d √ó (n + k))

n = cantidad de n√∫meros

d = n√∫mero de d√≠gitos del n√∫mero m√°s largo

k = base (10 en decimal)

Espacio: O(n + k)

Radix Sort ‚Üí cuando trabajas con n√∫meros enteros o cadenas con una longitud fija o limitada.

Explicaci√≥n r√°pida
getDigit(num, k): obtiene el d√≠gito en la posici√≥n k.

digitCount(num): cuenta cu√°ntos d√≠gitos tiene un n√∫mero.

mostDigits(arr): encuentra cu√°ntas pasadas necesitamos (m√°ximo n√∫mero de d√≠gitos).

radixSort(arr):

Repite una vez por cada d√≠gito.

Distribuye los n√∫meros en 10 buckets (0‚Äì9) seg√∫n el d√≠gito actual.

Luego concatena los buckets para formar el nuevo arreglo.

üß© ¬øY los negativos?
Radix Sort no funciona con negativos directamente porque los d√≠gitos no indican orden en n√∫meros negativos. Pero se puede adaptar as√≠:

Separar negativos y positivos.

Aplicar Radix Sort a ambos.

Invertir los negativos ordenados y unirlos con los positivos:

const sorted = [...radixSort(negativos).reverse(), ...radixSort(positivos)];
*/

function getDigit(num, place) {
    return Math.floor(Math.abs(num) / Math.pow(10, place)) % 10;
}

function digitCount(num) {
    if (num === 0) return 1;
    return Math.floor(Math.log10(Math.abs(num))) + 1;
}

function mostDigits(nums) {
    let maxDigits = 0;
    for (let num of nums) {
        maxDigits = Math.max(maxDigits, digitCount(num));
    }
    return maxDigits;
}

function radixSort(nums) {
    let maxDigitCount = mostDigits(nums);

    for (let k = 0; k < maxDigitCount; k++) {
        let digitBuckets = Array.from({ length: 10 }, () => []);

        for (let num of nums) {
            let digit = getDigit(num, k);
            digitBuckets[digit].push(num);
        }

        nums = [].concat(...digitBuckets);
    }

    return nums;
}

// Prueba:
// const arr = [170, 45, 75, 90, 802, 24, 2, 66];
console.log(radixSort(numbers));

